/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (5.1.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package za.co.vodacom.cvm.client.wigroup.api;

import io.swagger.annotations.*;
import java.util.List;
import java.util.Map;
import java.util.Optional;
import javax.validation.Valid;
import javax.validation.constraints.*;
import org.springframework.http.HttpStatus;
import org.springframework.http.MediaType;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.context.request.NativeWebRequest;
import org.springframework.web.multipart.MultipartFile;
import springfox.documentation.annotations.ApiIgnore;
import za.co.vodacom.cvm.client.wigroup.model.CouponsDelResponse;
import za.co.vodacom.cvm.client.wigroup.model.CouponsGetResponse;
import za.co.vodacom.cvm.client.wigroup.model.CouponsRequest;
import za.co.vodacom.cvm.client.wigroup.model.CouponsResponse;

@javax.annotation.Generated(
    value = "org.openapitools.codegen.languages.SpringCodegen",
    date = "2021-07-12T21:30:03.237+02:00[Africa/Harare]"
)
@Validated
@Api(value = "Coupons", description = "the Coupons API")
public interface CouponsApi {
    /**
     * POST /coupons/{issueWiCode} : Customer voucher reservation
     * Reserve a voucher for a customer.
     *
     * @param issueWiCode The original wigroup voucher id or VP_VOUCHER.ID used to issued the voucher (required)
     * @param couponsRequest  (optional)
     * @return Sucessful operation (status code 200)
     *         or No content (status code 204)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Method Not Allowed (status code 405)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(
        value = "Customer voucher reservation",
        nickname = "updateVoucherToReserved",
        notes = "Reserve a voucher for a customer.",
        response = CouponsResponse.class,
        tags = { "coupons" }
    )
    @ApiResponses(
        value = {
            @ApiResponse(code = 200, message = "Sucessful operation", response = CouponsResponse.class),
            @ApiResponse(code = 204, message = "No content"),
            @ApiResponse(code = 400, message = "Bad Request"),
            @ApiResponse(code = 404, message = "Not Found"),
            @ApiResponse(code = 405, message = "Method Not Allowed"),
            @ApiResponse(code = 500, message = "Internal Server Error"),
        }
    )
    @PostMapping(value = "/coupons/{issueWiCode}", produces = "application/json", consumes = "application/json")
    ResponseEntity<CouponsResponse> updateVoucherToReserved(
        @ApiParam(
            value = "The original wigroup voucher id or VP_VOUCHER.ID used to issued the voucher",
            required = true,
            defaultValue = "true"
        ) @PathVariable("issueWiCode") Boolean issueWiCode,
        @ApiParam(value = "") @Valid @RequestBody(required = false) CouponsRequest couponsRequest
    );

    /**
     * GET /coupons/{id} : Return a voucher which was issued
     * Return a voucher which was issued
     *
     * @param id The original wigroup voucher id or VP_VOUCHER.ID used to issued the voucher (required)
     * @return Successful Operation (status code 200)
     *         or No content (status code 204)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Method Not Allowed (status code 405)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(
        value = "Return a voucher which was issued",
        nickname = "updateVoucherToReturned",
        notes = "Return a voucher which was issued",
        response = CouponsGetResponse.class,
        tags = { "coupons" }
    )
    @ApiResponses(
        value = {
            @ApiResponse(code = 200, message = "Successful Operation", response = CouponsGetResponse.class),
            @ApiResponse(code = 204, message = "No content"),
            @ApiResponse(code = 400, message = "Bad Request"),
            @ApiResponse(code = 404, message = "Not Found"),
            @ApiResponse(code = 405, message = "Method Not Allowed"),
            @ApiResponse(code = 500, message = "Internal Server Error"),
        }
    )
    @GetMapping(value = "/coupons/{id}", produces = "application/json")
    ResponseEntity<CouponsGetResponse> updateVoucherToReturned(
        @ApiParam(value = "The original wigroup voucher id or VP_VOUCHER.ID used to issued the voucher", required = true) @PathVariable(
            "id"
        ) Long id
    );

    /**
     * DELETE /coupons/{idd} : Check whether the given voucher based product has stock.
     * Check whether the given voucher based product has stock
     *
     * @param idd The original wigroup voucher id (required)
     * @return Successful Operation (status code 200)
     *         or No content (status code 204)
     *         or Bad Request (status code 400)
     *         or Not Found (status code 404)
     *         or Method Not Allowed (status code 405)
     *         or Internal Server Error (status code 500)
     */
    @ApiOperation(
        value = "Check whether the given voucher based product has stock.",
        nickname = "updateVoucherToValid",
        notes = "Check whether the given voucher based product has stock",
        response = CouponsDelResponse.class,
        tags = { "coupons" }
    )
    @ApiResponses(
        value = {
            @ApiResponse(code = 200, message = "Successful Operation", response = CouponsDelResponse.class),
            @ApiResponse(code = 204, message = "No content"),
            @ApiResponse(code = 400, message = "Bad Request"),
            @ApiResponse(code = 404, message = "Not Found"),
            @ApiResponse(code = 405, message = "Method Not Allowed"),
            @ApiResponse(code = 500, message = "Internal Server Error"),
        }
    )
    @DeleteMapping(value = "/coupons/{idd}", produces = "application/json")
    ResponseEntity<CouponsDelResponse> updateVoucherToValid(
        @ApiParam(value = "The original wigroup voucher id", required = true) @PathVariable("idd") Long idd
    );
}
